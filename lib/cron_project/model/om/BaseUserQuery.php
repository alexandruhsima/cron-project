<?php


/**
 * Base class that represents a query for the 'user' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.9 on:
 *
 * Tue 03 Sep 2013 04:11:14 PM EEST
 *
 * @method UserQuery orderById($order = Criteria::ASC) Order by the id column
 * @method UserQuery orderBySysameId($order = Criteria::ASC) Order by the sysame_id column
 * @method UserQuery orderByForename($order = Criteria::ASC) Order by the forename column
 * @method UserQuery orderBySurname($order = Criteria::ASC) Order by the surname column
 * @method UserQuery orderByStreetName($order = Criteria::ASC) Order by the street_name column
 * @method UserQuery orderByStreetNumber($order = Criteria::ASC) Order by the street_number column
 * @method UserQuery orderByPostbox($order = Criteria::ASC) Order by the postbox column
 * @method UserQuery orderByZipCode($order = Criteria::ASC) Order by the zip_code column
 * @method UserQuery orderByCity($order = Criteria::ASC) Order by the city column
 * @method UserQuery orderByCountry($order = Criteria::ASC) Order by the country column
 * @method UserQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method UserQuery orderByPhoneHome($order = Criteria::ASC) Order by the phone_home column
 * @method UserQuery orderByPhoneMobile($order = Criteria::ASC) Order by the phone_mobile column
 * @method UserQuery orderByPhoneWork($order = Criteria::ASC) Order by the phone_work column
 * @method UserQuery orderByPermission($order = Criteria::ASC) Order by the permission column
 * @method UserQuery orderByPermissionEmail($order = Criteria::ASC) Order by the permission_email column
 * @method UserQuery orderByPermissionSms($order = Criteria::ASC) Order by the permission_sms column
 * @method UserQuery orderByDateOfBirth($order = Criteria::ASC) Order by the date_of_birth column
 * @method UserQuery orderByCustomerType($order = Criteria::ASC) Order by the customer_type column
 * @method UserQuery orderBySysameUpdatedAt($order = Criteria::ASC) Order by the sysame_updated_at column
 * @method UserQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method UserQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method UserQuery orderByDeletedAt($order = Criteria::ASC) Order by the deleted_at column
 *
 * @method UserQuery groupById() Group by the id column
 * @method UserQuery groupBySysameId() Group by the sysame_id column
 * @method UserQuery groupByForename() Group by the forename column
 * @method UserQuery groupBySurname() Group by the surname column
 * @method UserQuery groupByStreetName() Group by the street_name column
 * @method UserQuery groupByStreetNumber() Group by the street_number column
 * @method UserQuery groupByPostbox() Group by the postbox column
 * @method UserQuery groupByZipCode() Group by the zip_code column
 * @method UserQuery groupByCity() Group by the city column
 * @method UserQuery groupByCountry() Group by the country column
 * @method UserQuery groupByEmail() Group by the email column
 * @method UserQuery groupByPhoneHome() Group by the phone_home column
 * @method UserQuery groupByPhoneMobile() Group by the phone_mobile column
 * @method UserQuery groupByPhoneWork() Group by the phone_work column
 * @method UserQuery groupByPermission() Group by the permission column
 * @method UserQuery groupByPermissionEmail() Group by the permission_email column
 * @method UserQuery groupByPermissionSms() Group by the permission_sms column
 * @method UserQuery groupByDateOfBirth() Group by the date_of_birth column
 * @method UserQuery groupByCustomerType() Group by the customer_type column
 * @method UserQuery groupBySysameUpdatedAt() Group by the sysame_updated_at column
 * @method UserQuery groupByCreatedAt() Group by the created_at column
 * @method UserQuery groupByUpdatedAt() Group by the updated_at column
 * @method UserQuery groupByDeletedAt() Group by the deleted_at column
 *
 * @method UserQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method UserQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method UserQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method UserQuery leftJoinUserCar($relationAlias = null) Adds a LEFT JOIN clause to the query using the UserCar relation
 * @method UserQuery rightJoinUserCar($relationAlias = null) Adds a RIGHT JOIN clause to the query using the UserCar relation
 * @method UserQuery innerJoinUserCar($relationAlias = null) Adds a INNER JOIN clause to the query using the UserCar relation
 *
 * @method User findOne(PropelPDO $con = null) Return the first User matching the query
 * @method User findOneOrCreate(PropelPDO $con = null) Return the first User matching the query, or a new User object populated from the query conditions when no match is found
 *
 * @method User findOneBySysameId(int $sysame_id) Return the first User filtered by the sysame_id column
 * @method User findOneByForename(string $forename) Return the first User filtered by the forename column
 * @method User findOneBySurname(string $surname) Return the first User filtered by the surname column
 * @method User findOneByStreetName(string $street_name) Return the first User filtered by the street_name column
 * @method User findOneByStreetNumber(string $street_number) Return the first User filtered by the street_number column
 * @method User findOneByPostbox(string $postbox) Return the first User filtered by the postbox column
 * @method User findOneByZipCode(string $zip_code) Return the first User filtered by the zip_code column
 * @method User findOneByCity(string $city) Return the first User filtered by the city column
 * @method User findOneByCountry(string $country) Return the first User filtered by the country column
 * @method User findOneByEmail(string $email) Return the first User filtered by the email column
 * @method User findOneByPhoneHome(string $phone_home) Return the first User filtered by the phone_home column
 * @method User findOneByPhoneMobile(string $phone_mobile) Return the first User filtered by the phone_mobile column
 * @method User findOneByPhoneWork(string $phone_work) Return the first User filtered by the phone_work column
 * @method User findOneByPermission(int $permission) Return the first User filtered by the permission column
 * @method User findOneByPermissionEmail(int $permission_email) Return the first User filtered by the permission_email column
 * @method User findOneByPermissionSms(int $permission_sms) Return the first User filtered by the permission_sms column
 * @method User findOneByDateOfBirth(string $date_of_birth) Return the first User filtered by the date_of_birth column
 * @method User findOneByCustomerType(string $customer_type) Return the first User filtered by the customer_type column
 * @method User findOneBySysameUpdatedAt(string $sysame_updated_at) Return the first User filtered by the sysame_updated_at column
 * @method User findOneByCreatedAt(string $created_at) Return the first User filtered by the created_at column
 * @method User findOneByUpdatedAt(string $updated_at) Return the first User filtered by the updated_at column
 * @method User findOneByDeletedAt(string $deleted_at) Return the first User filtered by the deleted_at column
 *
 * @method array findById(int $id) Return User objects filtered by the id column
 * @method array findBySysameId(int $sysame_id) Return User objects filtered by the sysame_id column
 * @method array findByForename(string $forename) Return User objects filtered by the forename column
 * @method array findBySurname(string $surname) Return User objects filtered by the surname column
 * @method array findByStreetName(string $street_name) Return User objects filtered by the street_name column
 * @method array findByStreetNumber(string $street_number) Return User objects filtered by the street_number column
 * @method array findByPostbox(string $postbox) Return User objects filtered by the postbox column
 * @method array findByZipCode(string $zip_code) Return User objects filtered by the zip_code column
 * @method array findByCity(string $city) Return User objects filtered by the city column
 * @method array findByCountry(string $country) Return User objects filtered by the country column
 * @method array findByEmail(string $email) Return User objects filtered by the email column
 * @method array findByPhoneHome(string $phone_home) Return User objects filtered by the phone_home column
 * @method array findByPhoneMobile(string $phone_mobile) Return User objects filtered by the phone_mobile column
 * @method array findByPhoneWork(string $phone_work) Return User objects filtered by the phone_work column
 * @method array findByPermission(int $permission) Return User objects filtered by the permission column
 * @method array findByPermissionEmail(int $permission_email) Return User objects filtered by the permission_email column
 * @method array findByPermissionSms(int $permission_sms) Return User objects filtered by the permission_sms column
 * @method array findByDateOfBirth(string $date_of_birth) Return User objects filtered by the date_of_birth column
 * @method array findByCustomerType(string $customer_type) Return User objects filtered by the customer_type column
 * @method array findBySysameUpdatedAt(string $sysame_updated_at) Return User objects filtered by the sysame_updated_at column
 * @method array findByCreatedAt(string $created_at) Return User objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return User objects filtered by the updated_at column
 * @method array findByDeletedAt(string $deleted_at) Return User objects filtered by the deleted_at column
 *
 * @package    propel.generator.lib.cron_project.model.om
 */
abstract class BaseUserQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseUserQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'cron_project', $modelName = 'User', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new UserQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param   UserQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return UserQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof UserQuery) {
            return $criteria;
        }
        $query = new UserQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   User|User[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = UserPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Alias of findPk to use instance pooling
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 User A model object, or null if the key is not found
     * @throws PropelException
     */
     public function findOneById($key, $con = null)
     {
        return $this->findPk($key, $con);
     }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 User A model object, or null if the key is not found
     * @throws PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `id`, `sysame_id`, `forename`, `surname`, `street_name`, `street_number`, `postbox`, `zip_code`, `city`, `country`, `email`, `phone_home`, `phone_mobile`, `phone_work`, `permission`, `permission_email`, `permission_sms`, `date_of_birth`, `customer_type`, `sysame_updated_at`, `created_at`, `updated_at`, `deleted_at` FROM `user` WHERE `id` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new User();
            $obj->hydrate($row);
            UserPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return User|User[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|User[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(UserPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(UserPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id >= 12
     * $query->filterById(array('max' => 12)); // WHERE id <= 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id)) {
            $useMinMax = false;
            if (isset($id['min'])) {
                $this->addUsingAlias(UserPeer::ID, $id['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id['max'])) {
                $this->addUsingAlias(UserPeer::ID, $id['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the sysame_id column
     *
     * Example usage:
     * <code>
     * $query->filterBySysameId(1234); // WHERE sysame_id = 1234
     * $query->filterBySysameId(array(12, 34)); // WHERE sysame_id IN (12, 34)
     * $query->filterBySysameId(array('min' => 12)); // WHERE sysame_id >= 12
     * $query->filterBySysameId(array('max' => 12)); // WHERE sysame_id <= 12
     * </code>
     *
     * @param     mixed $sysameId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterBySysameId($sysameId = null, $comparison = null)
    {
        if (is_array($sysameId)) {
            $useMinMax = false;
            if (isset($sysameId['min'])) {
                $this->addUsingAlias(UserPeer::SYSAME_ID, $sysameId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($sysameId['max'])) {
                $this->addUsingAlias(UserPeer::SYSAME_ID, $sysameId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::SYSAME_ID, $sysameId, $comparison);
    }

    /**
     * Filter the query on the forename column
     *
     * Example usage:
     * <code>
     * $query->filterByForename('fooValue');   // WHERE forename = 'fooValue'
     * $query->filterByForename('%fooValue%'); // WHERE forename LIKE '%fooValue%'
     * </code>
     *
     * @param     string $forename The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByForename($forename = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($forename)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $forename)) {
                $forename = str_replace('*', '%', $forename);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::FORENAME, $forename, $comparison);
    }

    /**
     * Filter the query on the surname column
     *
     * Example usage:
     * <code>
     * $query->filterBySurname('fooValue');   // WHERE surname = 'fooValue'
     * $query->filterBySurname('%fooValue%'); // WHERE surname LIKE '%fooValue%'
     * </code>
     *
     * @param     string $surname The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterBySurname($surname = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($surname)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $surname)) {
                $surname = str_replace('*', '%', $surname);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::SURNAME, $surname, $comparison);
    }

    /**
     * Filter the query on the street_name column
     *
     * Example usage:
     * <code>
     * $query->filterByStreetName('fooValue');   // WHERE street_name = 'fooValue'
     * $query->filterByStreetName('%fooValue%'); // WHERE street_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $streetName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByStreetName($streetName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($streetName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $streetName)) {
                $streetName = str_replace('*', '%', $streetName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::STREET_NAME, $streetName, $comparison);
    }

    /**
     * Filter the query on the street_number column
     *
     * Example usage:
     * <code>
     * $query->filterByStreetNumber('fooValue');   // WHERE street_number = 'fooValue'
     * $query->filterByStreetNumber('%fooValue%'); // WHERE street_number LIKE '%fooValue%'
     * </code>
     *
     * @param     string $streetNumber The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByStreetNumber($streetNumber = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($streetNumber)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $streetNumber)) {
                $streetNumber = str_replace('*', '%', $streetNumber);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::STREET_NUMBER, $streetNumber, $comparison);
    }

    /**
     * Filter the query on the postbox column
     *
     * Example usage:
     * <code>
     * $query->filterByPostbox('fooValue');   // WHERE postbox = 'fooValue'
     * $query->filterByPostbox('%fooValue%'); // WHERE postbox LIKE '%fooValue%'
     * </code>
     *
     * @param     string $postbox The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPostbox($postbox = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($postbox)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $postbox)) {
                $postbox = str_replace('*', '%', $postbox);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::POSTBOX, $postbox, $comparison);
    }

    /**
     * Filter the query on the zip_code column
     *
     * Example usage:
     * <code>
     * $query->filterByZipCode('fooValue');   // WHERE zip_code = 'fooValue'
     * $query->filterByZipCode('%fooValue%'); // WHERE zip_code LIKE '%fooValue%'
     * </code>
     *
     * @param     string $zipCode The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByZipCode($zipCode = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($zipCode)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $zipCode)) {
                $zipCode = str_replace('*', '%', $zipCode);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::ZIP_CODE, $zipCode, $comparison);
    }

    /**
     * Filter the query on the city column
     *
     * Example usage:
     * <code>
     * $query->filterByCity('fooValue');   // WHERE city = 'fooValue'
     * $query->filterByCity('%fooValue%'); // WHERE city LIKE '%fooValue%'
     * </code>
     *
     * @param     string $city The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByCity($city = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($city)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $city)) {
                $city = str_replace('*', '%', $city);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::CITY, $city, $comparison);
    }

    /**
     * Filter the query on the country column
     *
     * Example usage:
     * <code>
     * $query->filterByCountry('fooValue');   // WHERE country = 'fooValue'
     * $query->filterByCountry('%fooValue%'); // WHERE country LIKE '%fooValue%'
     * </code>
     *
     * @param     string $country The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByCountry($country = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($country)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $country)) {
                $country = str_replace('*', '%', $country);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::COUNTRY, $country, $comparison);
    }

    /**
     * Filter the query on the email column
     *
     * Example usage:
     * <code>
     * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
     * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
     * </code>
     *
     * @param     string $email The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByEmail($email = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($email)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $email)) {
                $email = str_replace('*', '%', $email);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::EMAIL, $email, $comparison);
    }

    /**
     * Filter the query on the phone_home column
     *
     * Example usage:
     * <code>
     * $query->filterByPhoneHome('fooValue');   // WHERE phone_home = 'fooValue'
     * $query->filterByPhoneHome('%fooValue%'); // WHERE phone_home LIKE '%fooValue%'
     * </code>
     *
     * @param     string $phoneHome The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPhoneHome($phoneHome = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($phoneHome)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $phoneHome)) {
                $phoneHome = str_replace('*', '%', $phoneHome);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::PHONE_HOME, $phoneHome, $comparison);
    }

    /**
     * Filter the query on the phone_mobile column
     *
     * Example usage:
     * <code>
     * $query->filterByPhoneMobile('fooValue');   // WHERE phone_mobile = 'fooValue'
     * $query->filterByPhoneMobile('%fooValue%'); // WHERE phone_mobile LIKE '%fooValue%'
     * </code>
     *
     * @param     string $phoneMobile The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPhoneMobile($phoneMobile = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($phoneMobile)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $phoneMobile)) {
                $phoneMobile = str_replace('*', '%', $phoneMobile);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::PHONE_MOBILE, $phoneMobile, $comparison);
    }

    /**
     * Filter the query on the phone_work column
     *
     * Example usage:
     * <code>
     * $query->filterByPhoneWork('fooValue');   // WHERE phone_work = 'fooValue'
     * $query->filterByPhoneWork('%fooValue%'); // WHERE phone_work LIKE '%fooValue%'
     * </code>
     *
     * @param     string $phoneWork The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPhoneWork($phoneWork = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($phoneWork)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $phoneWork)) {
                $phoneWork = str_replace('*', '%', $phoneWork);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::PHONE_WORK, $phoneWork, $comparison);
    }

    /**
     * Filter the query on the permission column
     *
     * Example usage:
     * <code>
     * $query->filterByPermission(1234); // WHERE permission = 1234
     * $query->filterByPermission(array(12, 34)); // WHERE permission IN (12, 34)
     * $query->filterByPermission(array('min' => 12)); // WHERE permission >= 12
     * $query->filterByPermission(array('max' => 12)); // WHERE permission <= 12
     * </code>
     *
     * @param     mixed $permission The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPermission($permission = null, $comparison = null)
    {
        if (is_array($permission)) {
            $useMinMax = false;
            if (isset($permission['min'])) {
                $this->addUsingAlias(UserPeer::PERMISSION, $permission['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($permission['max'])) {
                $this->addUsingAlias(UserPeer::PERMISSION, $permission['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::PERMISSION, $permission, $comparison);
    }

    /**
     * Filter the query on the permission_email column
     *
     * Example usage:
     * <code>
     * $query->filterByPermissionEmail(1234); // WHERE permission_email = 1234
     * $query->filterByPermissionEmail(array(12, 34)); // WHERE permission_email IN (12, 34)
     * $query->filterByPermissionEmail(array('min' => 12)); // WHERE permission_email >= 12
     * $query->filterByPermissionEmail(array('max' => 12)); // WHERE permission_email <= 12
     * </code>
     *
     * @param     mixed $permissionEmail The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPermissionEmail($permissionEmail = null, $comparison = null)
    {
        if (is_array($permissionEmail)) {
            $useMinMax = false;
            if (isset($permissionEmail['min'])) {
                $this->addUsingAlias(UserPeer::PERMISSION_EMAIL, $permissionEmail['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($permissionEmail['max'])) {
                $this->addUsingAlias(UserPeer::PERMISSION_EMAIL, $permissionEmail['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::PERMISSION_EMAIL, $permissionEmail, $comparison);
    }

    /**
     * Filter the query on the permission_sms column
     *
     * Example usage:
     * <code>
     * $query->filterByPermissionSms(1234); // WHERE permission_sms = 1234
     * $query->filterByPermissionSms(array(12, 34)); // WHERE permission_sms IN (12, 34)
     * $query->filterByPermissionSms(array('min' => 12)); // WHERE permission_sms >= 12
     * $query->filterByPermissionSms(array('max' => 12)); // WHERE permission_sms <= 12
     * </code>
     *
     * @param     mixed $permissionSms The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByPermissionSms($permissionSms = null, $comparison = null)
    {
        if (is_array($permissionSms)) {
            $useMinMax = false;
            if (isset($permissionSms['min'])) {
                $this->addUsingAlias(UserPeer::PERMISSION_SMS, $permissionSms['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($permissionSms['max'])) {
                $this->addUsingAlias(UserPeer::PERMISSION_SMS, $permissionSms['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::PERMISSION_SMS, $permissionSms, $comparison);
    }

    /**
     * Filter the query on the date_of_birth column
     *
     * Example usage:
     * <code>
     * $query->filterByDateOfBirth('2011-03-14'); // WHERE date_of_birth = '2011-03-14'
     * $query->filterByDateOfBirth('now'); // WHERE date_of_birth = '2011-03-14'
     * $query->filterByDateOfBirth(array('max' => 'yesterday')); // WHERE date_of_birth > '2011-03-13'
     * </code>
     *
     * @param     mixed $dateOfBirth The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByDateOfBirth($dateOfBirth = null, $comparison = null)
    {
        if (is_array($dateOfBirth)) {
            $useMinMax = false;
            if (isset($dateOfBirth['min'])) {
                $this->addUsingAlias(UserPeer::DATE_OF_BIRTH, $dateOfBirth['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dateOfBirth['max'])) {
                $this->addUsingAlias(UserPeer::DATE_OF_BIRTH, $dateOfBirth['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::DATE_OF_BIRTH, $dateOfBirth, $comparison);
    }

    /**
     * Filter the query on the customer_type column
     *
     * Example usage:
     * <code>
     * $query->filterByCustomerType('fooValue');   // WHERE customer_type = 'fooValue'
     * $query->filterByCustomerType('%fooValue%'); // WHERE customer_type LIKE '%fooValue%'
     * </code>
     *
     * @param     string $customerType The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByCustomerType($customerType = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($customerType)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $customerType)) {
                $customerType = str_replace('*', '%', $customerType);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::CUSTOMER_TYPE, $customerType, $comparison);
    }

    /**
     * Filter the query on the sysame_updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterBySysameUpdatedAt('2011-03-14'); // WHERE sysame_updated_at = '2011-03-14'
     * $query->filterBySysameUpdatedAt('now'); // WHERE sysame_updated_at = '2011-03-14'
     * $query->filterBySysameUpdatedAt(array('max' => 'yesterday')); // WHERE sysame_updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $sysameUpdatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterBySysameUpdatedAt($sysameUpdatedAt = null, $comparison = null)
    {
        if (is_array($sysameUpdatedAt)) {
            $useMinMax = false;
            if (isset($sysameUpdatedAt['min'])) {
                $this->addUsingAlias(UserPeer::SYSAME_UPDATED_AT, $sysameUpdatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($sysameUpdatedAt['max'])) {
                $this->addUsingAlias(UserPeer::SYSAME_UPDATED_AT, $sysameUpdatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::SYSAME_UPDATED_AT, $sysameUpdatedAt, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(UserPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(UserPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(UserPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(UserPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the deleted_at column
     *
     * Example usage:
     * <code>
     * $query->filterByDeletedAt('fooValue');   // WHERE deleted_at = 'fooValue'
     * $query->filterByDeletedAt('%fooValue%'); // WHERE deleted_at LIKE '%fooValue%'
     * </code>
     *
     * @param     string $deletedAt The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function filterByDeletedAt($deletedAt = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($deletedAt)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $deletedAt)) {
                $deletedAt = str_replace('*', '%', $deletedAt);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserPeer::DELETED_AT, $deletedAt, $comparison);
    }

    /**
     * Filter the query by a related UserCar object
     *
     * @param   UserCar|PropelObjectCollection $userCar  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 UserQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByUserCar($userCar, $comparison = null)
    {
        if ($userCar instanceof UserCar) {
            return $this
                ->addUsingAlias(UserPeer::SYSAME_ID, $userCar->getIdUser(), $comparison);
        } elseif ($userCar instanceof PropelObjectCollection) {
            return $this
                ->useUserCarQuery()
                ->filterByPrimaryKeys($userCar->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByUserCar() only accepts arguments of type UserCar or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the UserCar relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function joinUserCar($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('UserCar');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'UserCar');
        }

        return $this;
    }

    /**
     * Use the UserCar relation UserCar object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   UserCarQuery A secondary query class using the current class as primary query
     */
    public function useUserCarQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinUserCar($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'UserCar', 'UserCarQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   User $user Object to remove from the list of results
     *
     * @return UserQuery The current query, for fluid interface
     */
    public function prune($user = null)
    {
        if ($user) {
            $this->addUsingAlias(UserPeer::ID, $user->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
