<?php


/**
 * Base class that represents a query for the 'car' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.9 on:
 *
 * Tue 03 Sep 2013 04:11:14 PM EEST
 *
 * @method CarQuery orderById($order = Criteria::ASC) Order by the id column
 * @method CarQuery orderByVinNumber($order = Criteria::ASC) Order by the vin_number column
 * @method CarQuery orderByLcdv16($order = Criteria::ASC) Order by the lcdv_16 column
 * @method CarQuery orderByLcdv32($order = Criteria::ASC) Order by the lcdv_32 column
 * @method CarQuery orderByRegNumber($order = Criteria::ASC) Order by the reg_number column
 * @method CarQuery orderByFirstRegDate($order = Criteria::ASC) Order by the first_reg_date column
 * @method CarQuery orderByCarMake($order = Criteria::ASC) Order by the car_make column
 * @method CarQuery orderByModelVariant($order = Criteria::ASC) Order by the model_variant column
 * @method CarQuery orderByModelFinishing($order = Criteria::ASC) Order by the model_finishing column
 * @method CarQuery orderByGearBox($order = Criteria::ASC) Order by the gear_box column
 * @method CarQuery orderByOutline($order = Criteria::ASC) Order by the outline column
 * @method CarQuery orderByCarGenre($order = Criteria::ASC) Order by the car_genre column
 * @method CarQuery orderByDealerCode($order = Criteria::ASC) Order by the dealer_code column
 * @method CarQuery orderByDealerName($order = Criteria::ASC) Order by the dealer_name column
 * @method CarQuery orderByLastKnownMilage($order = Criteria::ASC) Order by the last_known_milage column
 * @method CarQuery orderBySysameUpdatedAt($order = Criteria::ASC) Order by the sysame_updated_at column
 * @method CarQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method CarQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method CarQuery orderByDeletedAt($order = Criteria::ASC) Order by the deleted_at column
 *
 * @method CarQuery groupById() Group by the id column
 * @method CarQuery groupByVinNumber() Group by the vin_number column
 * @method CarQuery groupByLcdv16() Group by the lcdv_16 column
 * @method CarQuery groupByLcdv32() Group by the lcdv_32 column
 * @method CarQuery groupByRegNumber() Group by the reg_number column
 * @method CarQuery groupByFirstRegDate() Group by the first_reg_date column
 * @method CarQuery groupByCarMake() Group by the car_make column
 * @method CarQuery groupByModelVariant() Group by the model_variant column
 * @method CarQuery groupByModelFinishing() Group by the model_finishing column
 * @method CarQuery groupByGearBox() Group by the gear_box column
 * @method CarQuery groupByOutline() Group by the outline column
 * @method CarQuery groupByCarGenre() Group by the car_genre column
 * @method CarQuery groupByDealerCode() Group by the dealer_code column
 * @method CarQuery groupByDealerName() Group by the dealer_name column
 * @method CarQuery groupByLastKnownMilage() Group by the last_known_milage column
 * @method CarQuery groupBySysameUpdatedAt() Group by the sysame_updated_at column
 * @method CarQuery groupByCreatedAt() Group by the created_at column
 * @method CarQuery groupByUpdatedAt() Group by the updated_at column
 * @method CarQuery groupByDeletedAt() Group by the deleted_at column
 *
 * @method CarQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method CarQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method CarQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method CarQuery leftJoinUserCar($relationAlias = null) Adds a LEFT JOIN clause to the query using the UserCar relation
 * @method CarQuery rightJoinUserCar($relationAlias = null) Adds a RIGHT JOIN clause to the query using the UserCar relation
 * @method CarQuery innerJoinUserCar($relationAlias = null) Adds a INNER JOIN clause to the query using the UserCar relation
 *
 * @method Car findOne(PropelPDO $con = null) Return the first Car matching the query
 * @method Car findOneOrCreate(PropelPDO $con = null) Return the first Car matching the query, or a new Car object populated from the query conditions when no match is found
 *
 * @method Car findOneByVinNumber(string $vin_number) Return the first Car filtered by the vin_number column
 * @method Car findOneByLcdv16(string $lcdv_16) Return the first Car filtered by the lcdv_16 column
 * @method Car findOneByLcdv32(string $lcdv_32) Return the first Car filtered by the lcdv_32 column
 * @method Car findOneByRegNumber(string $reg_number) Return the first Car filtered by the reg_number column
 * @method Car findOneByFirstRegDate(string $first_reg_date) Return the first Car filtered by the first_reg_date column
 * @method Car findOneByCarMake(string $car_make) Return the first Car filtered by the car_make column
 * @method Car findOneByModelVariant(string $model_variant) Return the first Car filtered by the model_variant column
 * @method Car findOneByModelFinishing(string $model_finishing) Return the first Car filtered by the model_finishing column
 * @method Car findOneByGearBox(string $gear_box) Return the first Car filtered by the gear_box column
 * @method Car findOneByOutline(string $outline) Return the first Car filtered by the outline column
 * @method Car findOneByCarGenre(string $car_genre) Return the first Car filtered by the car_genre column
 * @method Car findOneByDealerCode(string $dealer_code) Return the first Car filtered by the dealer_code column
 * @method Car findOneByDealerName(string $dealer_name) Return the first Car filtered by the dealer_name column
 * @method Car findOneByLastKnownMilage(string $last_known_milage) Return the first Car filtered by the last_known_milage column
 * @method Car findOneBySysameUpdatedAt(string $sysame_updated_at) Return the first Car filtered by the sysame_updated_at column
 * @method Car findOneByCreatedAt(string $created_at) Return the first Car filtered by the created_at column
 * @method Car findOneByUpdatedAt(string $updated_at) Return the first Car filtered by the updated_at column
 * @method Car findOneByDeletedAt(string $deleted_at) Return the first Car filtered by the deleted_at column
 *
 * @method array findById(int $id) Return Car objects filtered by the id column
 * @method array findByVinNumber(string $vin_number) Return Car objects filtered by the vin_number column
 * @method array findByLcdv16(string $lcdv_16) Return Car objects filtered by the lcdv_16 column
 * @method array findByLcdv32(string $lcdv_32) Return Car objects filtered by the lcdv_32 column
 * @method array findByRegNumber(string $reg_number) Return Car objects filtered by the reg_number column
 * @method array findByFirstRegDate(string $first_reg_date) Return Car objects filtered by the first_reg_date column
 * @method array findByCarMake(string $car_make) Return Car objects filtered by the car_make column
 * @method array findByModelVariant(string $model_variant) Return Car objects filtered by the model_variant column
 * @method array findByModelFinishing(string $model_finishing) Return Car objects filtered by the model_finishing column
 * @method array findByGearBox(string $gear_box) Return Car objects filtered by the gear_box column
 * @method array findByOutline(string $outline) Return Car objects filtered by the outline column
 * @method array findByCarGenre(string $car_genre) Return Car objects filtered by the car_genre column
 * @method array findByDealerCode(string $dealer_code) Return Car objects filtered by the dealer_code column
 * @method array findByDealerName(string $dealer_name) Return Car objects filtered by the dealer_name column
 * @method array findByLastKnownMilage(string $last_known_milage) Return Car objects filtered by the last_known_milage column
 * @method array findBySysameUpdatedAt(string $sysame_updated_at) Return Car objects filtered by the sysame_updated_at column
 * @method array findByCreatedAt(string $created_at) Return Car objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Car objects filtered by the updated_at column
 * @method array findByDeletedAt(string $deleted_at) Return Car objects filtered by the deleted_at column
 *
 * @package    propel.generator.lib.cron_project.model.om
 */
abstract class BaseCarQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseCarQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'cron_project', $modelName = 'Car', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new CarQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param   CarQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return CarQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof CarQuery) {
            return $criteria;
        }
        $query = new CarQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Car|Car[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = CarPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(CarPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Alias of findPk to use instance pooling
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Car A model object, or null if the key is not found
     * @throws PropelException
     */
     public function findOneById($key, $con = null)
     {
        return $this->findPk($key, $con);
     }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Car A model object, or null if the key is not found
     * @throws PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `id`, `vin_number`, `lcdv_16`, `lcdv_32`, `reg_number`, `first_reg_date`, `car_make`, `model_variant`, `model_finishing`, `gear_box`, `outline`, `car_genre`, `dealer_code`, `dealer_name`, `last_known_milage`, `sysame_updated_at`, `created_at`, `updated_at`, `deleted_at` FROM `car` WHERE `id` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Car();
            $obj->hydrate($row);
            CarPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Car|Car[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Car[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(CarPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(CarPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id >= 12
     * $query->filterById(array('max' => 12)); // WHERE id <= 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id)) {
            $useMinMax = false;
            if (isset($id['min'])) {
                $this->addUsingAlias(CarPeer::ID, $id['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id['max'])) {
                $this->addUsingAlias(CarPeer::ID, $id['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CarPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the vin_number column
     *
     * Example usage:
     * <code>
     * $query->filterByVinNumber('fooValue');   // WHERE vin_number = 'fooValue'
     * $query->filterByVinNumber('%fooValue%'); // WHERE vin_number LIKE '%fooValue%'
     * </code>
     *
     * @param     string $vinNumber The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByVinNumber($vinNumber = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($vinNumber)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $vinNumber)) {
                $vinNumber = str_replace('*', '%', $vinNumber);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::VIN_NUMBER, $vinNumber, $comparison);
    }

    /**
     * Filter the query on the lcdv_16 column
     *
     * Example usage:
     * <code>
     * $query->filterByLcdv16('fooValue');   // WHERE lcdv_16 = 'fooValue'
     * $query->filterByLcdv16('%fooValue%'); // WHERE lcdv_16 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $lcdv16 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByLcdv16($lcdv16 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($lcdv16)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $lcdv16)) {
                $lcdv16 = str_replace('*', '%', $lcdv16);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::LCDV_16, $lcdv16, $comparison);
    }

    /**
     * Filter the query on the lcdv_32 column
     *
     * Example usage:
     * <code>
     * $query->filterByLcdv32('fooValue');   // WHERE lcdv_32 = 'fooValue'
     * $query->filterByLcdv32('%fooValue%'); // WHERE lcdv_32 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $lcdv32 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByLcdv32($lcdv32 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($lcdv32)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $lcdv32)) {
                $lcdv32 = str_replace('*', '%', $lcdv32);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::LCDV_32, $lcdv32, $comparison);
    }

    /**
     * Filter the query on the reg_number column
     *
     * Example usage:
     * <code>
     * $query->filterByRegNumber('fooValue');   // WHERE reg_number = 'fooValue'
     * $query->filterByRegNumber('%fooValue%'); // WHERE reg_number LIKE '%fooValue%'
     * </code>
     *
     * @param     string $regNumber The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByRegNumber($regNumber = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($regNumber)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $regNumber)) {
                $regNumber = str_replace('*', '%', $regNumber);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::REG_NUMBER, $regNumber, $comparison);
    }

    /**
     * Filter the query on the first_reg_date column
     *
     * Example usage:
     * <code>
     * $query->filterByFirstRegDate('2011-03-14'); // WHERE first_reg_date = '2011-03-14'
     * $query->filterByFirstRegDate('now'); // WHERE first_reg_date = '2011-03-14'
     * $query->filterByFirstRegDate(array('max' => 'yesterday')); // WHERE first_reg_date > '2011-03-13'
     * </code>
     *
     * @param     mixed $firstRegDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByFirstRegDate($firstRegDate = null, $comparison = null)
    {
        if (is_array($firstRegDate)) {
            $useMinMax = false;
            if (isset($firstRegDate['min'])) {
                $this->addUsingAlias(CarPeer::FIRST_REG_DATE, $firstRegDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($firstRegDate['max'])) {
                $this->addUsingAlias(CarPeer::FIRST_REG_DATE, $firstRegDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CarPeer::FIRST_REG_DATE, $firstRegDate, $comparison);
    }

    /**
     * Filter the query on the car_make column
     *
     * Example usage:
     * <code>
     * $query->filterByCarMake('fooValue');   // WHERE car_make = 'fooValue'
     * $query->filterByCarMake('%fooValue%'); // WHERE car_make LIKE '%fooValue%'
     * </code>
     *
     * @param     string $carMake The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByCarMake($carMake = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($carMake)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $carMake)) {
                $carMake = str_replace('*', '%', $carMake);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::CAR_MAKE, $carMake, $comparison);
    }

    /**
     * Filter the query on the model_variant column
     *
     * Example usage:
     * <code>
     * $query->filterByModelVariant('fooValue');   // WHERE model_variant = 'fooValue'
     * $query->filterByModelVariant('%fooValue%'); // WHERE model_variant LIKE '%fooValue%'
     * </code>
     *
     * @param     string $modelVariant The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByModelVariant($modelVariant = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($modelVariant)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $modelVariant)) {
                $modelVariant = str_replace('*', '%', $modelVariant);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::MODEL_VARIANT, $modelVariant, $comparison);
    }

    /**
     * Filter the query on the model_finishing column
     *
     * Example usage:
     * <code>
     * $query->filterByModelFinishing('fooValue');   // WHERE model_finishing = 'fooValue'
     * $query->filterByModelFinishing('%fooValue%'); // WHERE model_finishing LIKE '%fooValue%'
     * </code>
     *
     * @param     string $modelFinishing The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByModelFinishing($modelFinishing = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($modelFinishing)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $modelFinishing)) {
                $modelFinishing = str_replace('*', '%', $modelFinishing);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::MODEL_FINISHING, $modelFinishing, $comparison);
    }

    /**
     * Filter the query on the gear_box column
     *
     * Example usage:
     * <code>
     * $query->filterByGearBox('fooValue');   // WHERE gear_box = 'fooValue'
     * $query->filterByGearBox('%fooValue%'); // WHERE gear_box LIKE '%fooValue%'
     * </code>
     *
     * @param     string $gearBox The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByGearBox($gearBox = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($gearBox)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $gearBox)) {
                $gearBox = str_replace('*', '%', $gearBox);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::GEAR_BOX, $gearBox, $comparison);
    }

    /**
     * Filter the query on the outline column
     *
     * Example usage:
     * <code>
     * $query->filterByOutline('fooValue');   // WHERE outline = 'fooValue'
     * $query->filterByOutline('%fooValue%'); // WHERE outline LIKE '%fooValue%'
     * </code>
     *
     * @param     string $outline The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByOutline($outline = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($outline)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $outline)) {
                $outline = str_replace('*', '%', $outline);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::OUTLINE, $outline, $comparison);
    }

    /**
     * Filter the query on the car_genre column
     *
     * Example usage:
     * <code>
     * $query->filterByCarGenre('fooValue');   // WHERE car_genre = 'fooValue'
     * $query->filterByCarGenre('%fooValue%'); // WHERE car_genre LIKE '%fooValue%'
     * </code>
     *
     * @param     string $carGenre The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByCarGenre($carGenre = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($carGenre)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $carGenre)) {
                $carGenre = str_replace('*', '%', $carGenre);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::CAR_GENRE, $carGenre, $comparison);
    }

    /**
     * Filter the query on the dealer_code column
     *
     * Example usage:
     * <code>
     * $query->filterByDealerCode('fooValue');   // WHERE dealer_code = 'fooValue'
     * $query->filterByDealerCode('%fooValue%'); // WHERE dealer_code LIKE '%fooValue%'
     * </code>
     *
     * @param     string $dealerCode The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByDealerCode($dealerCode = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($dealerCode)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $dealerCode)) {
                $dealerCode = str_replace('*', '%', $dealerCode);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::DEALER_CODE, $dealerCode, $comparison);
    }

    /**
     * Filter the query on the dealer_name column
     *
     * Example usage:
     * <code>
     * $query->filterByDealerName('fooValue');   // WHERE dealer_name = 'fooValue'
     * $query->filterByDealerName('%fooValue%'); // WHERE dealer_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $dealerName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByDealerName($dealerName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($dealerName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $dealerName)) {
                $dealerName = str_replace('*', '%', $dealerName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::DEALER_NAME, $dealerName, $comparison);
    }

    /**
     * Filter the query on the last_known_milage column
     *
     * Example usage:
     * <code>
     * $query->filterByLastKnownMilage('fooValue');   // WHERE last_known_milage = 'fooValue'
     * $query->filterByLastKnownMilage('%fooValue%'); // WHERE last_known_milage LIKE '%fooValue%'
     * </code>
     *
     * @param     string $lastKnownMilage The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByLastKnownMilage($lastKnownMilage = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($lastKnownMilage)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $lastKnownMilage)) {
                $lastKnownMilage = str_replace('*', '%', $lastKnownMilage);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CarPeer::LAST_KNOWN_MILAGE, $lastKnownMilage, $comparison);
    }

    /**
     * Filter the query on the sysame_updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterBySysameUpdatedAt('2011-03-14'); // WHERE sysame_updated_at = '2011-03-14'
     * $query->filterBySysameUpdatedAt('now'); // WHERE sysame_updated_at = '2011-03-14'
     * $query->filterBySysameUpdatedAt(array('max' => 'yesterday')); // WHERE sysame_updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $sysameUpdatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterBySysameUpdatedAt($sysameUpdatedAt = null, $comparison = null)
    {
        if (is_array($sysameUpdatedAt)) {
            $useMinMax = false;
            if (isset($sysameUpdatedAt['min'])) {
                $this->addUsingAlias(CarPeer::SYSAME_UPDATED_AT, $sysameUpdatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($sysameUpdatedAt['max'])) {
                $this->addUsingAlias(CarPeer::SYSAME_UPDATED_AT, $sysameUpdatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CarPeer::SYSAME_UPDATED_AT, $sysameUpdatedAt, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(CarPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(CarPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CarPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(CarPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(CarPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CarPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the deleted_at column
     *
     * Example usage:
     * <code>
     * $query->filterByDeletedAt('2011-03-14'); // WHERE deleted_at = '2011-03-14'
     * $query->filterByDeletedAt('now'); // WHERE deleted_at = '2011-03-14'
     * $query->filterByDeletedAt(array('max' => 'yesterday')); // WHERE deleted_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $deletedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function filterByDeletedAt($deletedAt = null, $comparison = null)
    {
        if (is_array($deletedAt)) {
            $useMinMax = false;
            if (isset($deletedAt['min'])) {
                $this->addUsingAlias(CarPeer::DELETED_AT, $deletedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($deletedAt['max'])) {
                $this->addUsingAlias(CarPeer::DELETED_AT, $deletedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CarPeer::DELETED_AT, $deletedAt, $comparison);
    }

    /**
     * Filter the query by a related UserCar object
     *
     * @param   UserCar|PropelObjectCollection $userCar  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 CarQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByUserCar($userCar, $comparison = null)
    {
        if ($userCar instanceof UserCar) {
            return $this
                ->addUsingAlias(CarPeer::VIN_NUMBER, $userCar->getIdCar(), $comparison);
        } elseif ($userCar instanceof PropelObjectCollection) {
            return $this
                ->useUserCarQuery()
                ->filterByPrimaryKeys($userCar->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByUserCar() only accepts arguments of type UserCar or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the UserCar relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function joinUserCar($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('UserCar');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'UserCar');
        }

        return $this;
    }

    /**
     * Use the UserCar relation UserCar object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   UserCarQuery A secondary query class using the current class as primary query
     */
    public function useUserCarQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinUserCar($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'UserCar', 'UserCarQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Car $car Object to remove from the list of results
     *
     * @return CarQuery The current query, for fluid interface
     */
    public function prune($car = null)
    {
        if ($car) {
            $this->addUsingAlias(CarPeer::ID, $car->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
