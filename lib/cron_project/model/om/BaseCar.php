<?php


/**
 * Base class that represents a row from the 'car' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.9 on:
 *
 * Tue 03 Sep 2013 04:11:14 PM EEST
 *
 * @package    propel.generator.lib.cron_project.model.om
 */
abstract class BaseCar extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'CarPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        CarPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the vin_number field.
     * @var        string
     */
    protected $vin_number;

    /**
     * The value for the lcdv_16 field.
     * @var        string
     */
    protected $lcdv_16;

    /**
     * The value for the lcdv_32 field.
     * @var        string
     */
    protected $lcdv_32;

    /**
     * The value for the reg_number field.
     * @var        string
     */
    protected $reg_number;

    /**
     * The value for the first_reg_date field.
     * @var        string
     */
    protected $first_reg_date;

    /**
     * The value for the car_make field.
     * @var        string
     */
    protected $car_make;

    /**
     * The value for the model_variant field.
     * @var        string
     */
    protected $model_variant;

    /**
     * The value for the model_finishing field.
     * @var        string
     */
    protected $model_finishing;

    /**
     * The value for the gear_box field.
     * @var        string
     */
    protected $gear_box;

    /**
     * The value for the outline field.
     * @var        string
     */
    protected $outline;

    /**
     * The value for the car_genre field.
     * @var        string
     */
    protected $car_genre;

    /**
     * The value for the dealer_code field.
     * @var        string
     */
    protected $dealer_code;

    /**
     * The value for the dealer_name field.
     * @var        string
     */
    protected $dealer_name;

    /**
     * The value for the last_known_milage field.
     * @var        string
     */
    protected $last_known_milage;

    /**
     * The value for the sysame_updated_at field.
     * @var        string
     */
    protected $sysame_updated_at;

    /**
     * The value for the created_at field.
     * Note: this column has a database default value of: (expression) CURRENT_TIMESTAMP
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the deleted_at field.
     * @var        string
     */
    protected $deleted_at;

    /**
     * @var        PropelObjectCollection|UserCar[] Collection to store aggregation of UserCar objects.
     */
    protected $collUserCars;
    protected $collUserCarsPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Flag to prevent endless clearAllReferences($deep=true) loop, if this object is referenced
     * @var        boolean
     */
    protected $alreadyInClearAllReferencesDeep = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $userCarsScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
    }

    /**
     * Initializes internal state of BaseCar object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [vin_number] column value.
     *
     * @return string
     */
    public function getVinNumber()
    {
        return $this->vin_number;
    }

    /**
     * Get the [lcdv_16] column value.
     *
     * @return string
     */
    public function getLcdv16()
    {
        return $this->lcdv_16;
    }

    /**
     * Get the [lcdv_32] column value.
     *
     * @return string
     */
    public function getLcdv32()
    {
        return $this->lcdv_32;
    }

    /**
     * Get the [reg_number] column value.
     *
     * @return string
     */
    public function getRegNumber()
    {
        return $this->reg_number;
    }

    /**
     * Get the [optionally formatted] temporal [first_reg_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getFirstRegDate($format = 'Y-m-d H:i:s')
    {
        if ($this->first_reg_date === null) {
            return null;
        }

        if ($this->first_reg_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->first_reg_date);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->first_reg_date, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [car_make] column value.
     *
     * @return string
     */
    public function getCarMake()
    {
        return $this->car_make;
    }

    /**
     * Get the [model_variant] column value.
     *
     * @return string
     */
    public function getModelVariant()
    {
        return $this->model_variant;
    }

    /**
     * Get the [model_finishing] column value.
     *
     * @return string
     */
    public function getModelFinishing()
    {
        return $this->model_finishing;
    }

    /**
     * Get the [gear_box] column value.
     *
     * @return string
     */
    public function getGearBox()
    {
        return $this->gear_box;
    }

    /**
     * Get the [outline] column value.
     *
     * @return string
     */
    public function getOutline()
    {
        return $this->outline;
    }

    /**
     * Get the [car_genre] column value.
     *
     * @return string
     */
    public function getCarGenre()
    {
        return $this->car_genre;
    }

    /**
     * Get the [dealer_code] column value.
     *
     * @return string
     */
    public function getDealerCode()
    {
        return $this->dealer_code;
    }

    /**
     * Get the [dealer_name] column value.
     *
     * @return string
     */
    public function getDealerName()
    {
        return $this->dealer_name;
    }

    /**
     * Get the [last_known_milage] column value.
     *
     * @return string
     */
    public function getLastKnownMilage()
    {
        return $this->last_known_milage;
    }

    /**
     * Get the [optionally formatted] temporal [sysame_updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getSysameUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->sysame_updated_at === null) {
            return null;
        }

        if ($this->sysame_updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->sysame_updated_at);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->sysame_updated_at, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->created_at);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->updated_at);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [optionally formatted] temporal [deleted_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDeletedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->deleted_at === null) {
            return null;
        }

        if ($this->deleted_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->deleted_at);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->deleted_at, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = CarPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [vin_number] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setVinNumber($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->vin_number !== $v) {
            $this->vin_number = $v;
            $this->modifiedColumns[] = CarPeer::VIN_NUMBER;
        }


        return $this;
    } // setVinNumber()

    /**
     * Set the value of [lcdv_16] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setLcdv16($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lcdv_16 !== $v) {
            $this->lcdv_16 = $v;
            $this->modifiedColumns[] = CarPeer::LCDV_16;
        }


        return $this;
    } // setLcdv16()

    /**
     * Set the value of [lcdv_32] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setLcdv32($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lcdv_32 !== $v) {
            $this->lcdv_32 = $v;
            $this->modifiedColumns[] = CarPeer::LCDV_32;
        }


        return $this;
    } // setLcdv32()

    /**
     * Set the value of [reg_number] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setRegNumber($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->reg_number !== $v) {
            $this->reg_number = $v;
            $this->modifiedColumns[] = CarPeer::REG_NUMBER;
        }


        return $this;
    } // setRegNumber()

    /**
     * Sets the value of [first_reg_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Car The current object (for fluent API support)
     */
    public function setFirstRegDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->first_reg_date !== null || $dt !== null) {
            $currentDateAsString = ($this->first_reg_date !== null && $tmpDt = new DateTime($this->first_reg_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->first_reg_date = $newDateAsString;
                $this->modifiedColumns[] = CarPeer::FIRST_REG_DATE;
            }
        } // if either are not null


        return $this;
    } // setFirstRegDate()

    /**
     * Set the value of [car_make] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setCarMake($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->car_make !== $v) {
            $this->car_make = $v;
            $this->modifiedColumns[] = CarPeer::CAR_MAKE;
        }


        return $this;
    } // setCarMake()

    /**
     * Set the value of [model_variant] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setModelVariant($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->model_variant !== $v) {
            $this->model_variant = $v;
            $this->modifiedColumns[] = CarPeer::MODEL_VARIANT;
        }


        return $this;
    } // setModelVariant()

    /**
     * Set the value of [model_finishing] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setModelFinishing($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->model_finishing !== $v) {
            $this->model_finishing = $v;
            $this->modifiedColumns[] = CarPeer::MODEL_FINISHING;
        }


        return $this;
    } // setModelFinishing()

    /**
     * Set the value of [gear_box] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setGearBox($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->gear_box !== $v) {
            $this->gear_box = $v;
            $this->modifiedColumns[] = CarPeer::GEAR_BOX;
        }


        return $this;
    } // setGearBox()

    /**
     * Set the value of [outline] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setOutline($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->outline !== $v) {
            $this->outline = $v;
            $this->modifiedColumns[] = CarPeer::OUTLINE;
        }


        return $this;
    } // setOutline()

    /**
     * Set the value of [car_genre] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setCarGenre($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->car_genre !== $v) {
            $this->car_genre = $v;
            $this->modifiedColumns[] = CarPeer::CAR_GENRE;
        }


        return $this;
    } // setCarGenre()

    /**
     * Set the value of [dealer_code] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setDealerCode($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->dealer_code !== $v) {
            $this->dealer_code = $v;
            $this->modifiedColumns[] = CarPeer::DEALER_CODE;
        }


        return $this;
    } // setDealerCode()

    /**
     * Set the value of [dealer_name] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setDealerName($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->dealer_name !== $v) {
            $this->dealer_name = $v;
            $this->modifiedColumns[] = CarPeer::DEALER_NAME;
        }


        return $this;
    } // setDealerName()

    /**
     * Set the value of [last_known_milage] column.
     *
     * @param string $v new value
     * @return Car The current object (for fluent API support)
     */
    public function setLastKnownMilage($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->last_known_milage !== $v) {
            $this->last_known_milage = $v;
            $this->modifiedColumns[] = CarPeer::LAST_KNOWN_MILAGE;
        }


        return $this;
    } // setLastKnownMilage()

    /**
     * Sets the value of [sysame_updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Car The current object (for fluent API support)
     */
    public function setSysameUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->sysame_updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->sysame_updated_at !== null && $tmpDt = new DateTime($this->sysame_updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->sysame_updated_at = $newDateAsString;
                $this->modifiedColumns[] = CarPeer::SYSAME_UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setSysameUpdatedAt()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Car The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = CarPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Car The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = CarPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Sets the value of [deleted_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Car The current object (for fluent API support)
     */
    public function setDeletedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->deleted_at !== null || $dt !== null) {
            $currentDateAsString = ($this->deleted_at !== null && $tmpDt = new DateTime($this->deleted_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->deleted_at = $newDateAsString;
                $this->modifiedColumns[] = CarPeer::DELETED_AT;
            }
        } // if either are not null


        return $this;
    } // setDeletedAt()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->vin_number = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->lcdv_16 = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->lcdv_32 = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->reg_number = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->first_reg_date = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->car_make = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->model_variant = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->model_finishing = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->gear_box = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->outline = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->car_genre = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->dealer_code = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->dealer_name = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->last_known_milage = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->sysame_updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->created_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->updated_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
            $this->deleted_at = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }
            $this->postHydrate($row, $startcol, $rehydrate);
            return $startcol + 19; // 19 = CarPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Car object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(CarPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = CarPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->collUserCars = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(CarPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = CarQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(CarPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                CarPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->userCarsScheduledForDeletion !== null) {
                if (!$this->userCarsScheduledForDeletion->isEmpty()) {
                    UserCarQuery::create()
                        ->filterByPrimaryKeys($this->userCarsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->userCarsScheduledForDeletion = null;
                }
            }

            if ($this->collUserCars !== null) {
                foreach ($this->collUserCars as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;


         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(CarPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`id`';
        }
        if ($this->isColumnModified(CarPeer::VIN_NUMBER)) {
            $modifiedColumns[':p' . $index++]  = '`vin_number`';
        }
        if ($this->isColumnModified(CarPeer::LCDV_16)) {
            $modifiedColumns[':p' . $index++]  = '`lcdv_16`';
        }
        if ($this->isColumnModified(CarPeer::LCDV_32)) {
            $modifiedColumns[':p' . $index++]  = '`lcdv_32`';
        }
        if ($this->isColumnModified(CarPeer::REG_NUMBER)) {
            $modifiedColumns[':p' . $index++]  = '`reg_number`';
        }
        if ($this->isColumnModified(CarPeer::FIRST_REG_DATE)) {
            $modifiedColumns[':p' . $index++]  = '`first_reg_date`';
        }
        if ($this->isColumnModified(CarPeer::CAR_MAKE)) {
            $modifiedColumns[':p' . $index++]  = '`car_make`';
        }
        if ($this->isColumnModified(CarPeer::MODEL_VARIANT)) {
            $modifiedColumns[':p' . $index++]  = '`model_variant`';
        }
        if ($this->isColumnModified(CarPeer::MODEL_FINISHING)) {
            $modifiedColumns[':p' . $index++]  = '`model_finishing`';
        }
        if ($this->isColumnModified(CarPeer::GEAR_BOX)) {
            $modifiedColumns[':p' . $index++]  = '`gear_box`';
        }
        if ($this->isColumnModified(CarPeer::OUTLINE)) {
            $modifiedColumns[':p' . $index++]  = '`outline`';
        }
        if ($this->isColumnModified(CarPeer::CAR_GENRE)) {
            $modifiedColumns[':p' . $index++]  = '`car_genre`';
        }
        if ($this->isColumnModified(CarPeer::DEALER_CODE)) {
            $modifiedColumns[':p' . $index++]  = '`dealer_code`';
        }
        if ($this->isColumnModified(CarPeer::DEALER_NAME)) {
            $modifiedColumns[':p' . $index++]  = '`dealer_name`';
        }
        if ($this->isColumnModified(CarPeer::LAST_KNOWN_MILAGE)) {
            $modifiedColumns[':p' . $index++]  = '`last_known_milage`';
        }
        if ($this->isColumnModified(CarPeer::SYSAME_UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`sysame_updated_at`';
        }
        if ($this->isColumnModified(CarPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`created_at`';
        }
        if ($this->isColumnModified(CarPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`updated_at`';
        }
        if ($this->isColumnModified(CarPeer::DELETED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`deleted_at`';
        }

        $sql = sprintf(
            'INSERT INTO `car` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`id`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`vin_number`':
                        $stmt->bindValue($identifier, $this->vin_number, PDO::PARAM_STR);
                        break;
                    case '`lcdv_16`':
                        $stmt->bindValue($identifier, $this->lcdv_16, PDO::PARAM_STR);
                        break;
                    case '`lcdv_32`':
                        $stmt->bindValue($identifier, $this->lcdv_32, PDO::PARAM_STR);
                        break;
                    case '`reg_number`':
                        $stmt->bindValue($identifier, $this->reg_number, PDO::PARAM_STR);
                        break;
                    case '`first_reg_date`':
                        $stmt->bindValue($identifier, $this->first_reg_date, PDO::PARAM_STR);
                        break;
                    case '`car_make`':
                        $stmt->bindValue($identifier, $this->car_make, PDO::PARAM_STR);
                        break;
                    case '`model_variant`':
                        $stmt->bindValue($identifier, $this->model_variant, PDO::PARAM_STR);
                        break;
                    case '`model_finishing`':
                        $stmt->bindValue($identifier, $this->model_finishing, PDO::PARAM_STR);
                        break;
                    case '`gear_box`':
                        $stmt->bindValue($identifier, $this->gear_box, PDO::PARAM_STR);
                        break;
                    case '`outline`':
                        $stmt->bindValue($identifier, $this->outline, PDO::PARAM_STR);
                        break;
                    case '`car_genre`':
                        $stmt->bindValue($identifier, $this->car_genre, PDO::PARAM_STR);
                        break;
                    case '`dealer_code`':
                        $stmt->bindValue($identifier, $this->dealer_code, PDO::PARAM_STR);
                        break;
                    case '`dealer_name`':
                        $stmt->bindValue($identifier, $this->dealer_name, PDO::PARAM_STR);
                        break;
                    case '`last_known_milage`':
                        $stmt->bindValue($identifier, $this->last_known_milage, PDO::PARAM_STR);
                        break;
                    case '`sysame_updated_at`':
                        $stmt->bindValue($identifier, $this->sysame_updated_at, PDO::PARAM_STR);
                        break;
                    case '`created_at`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`updated_at`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`deleted_at`':
                        $stmt->bindValue($identifier, $this->deleted_at, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        }

        $this->validationFailures = $res;

        return false;
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = CarPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collUserCars !== null) {
                    foreach ($this->collUserCars as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = CarPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getVinNumber();
                break;
            case 2:
                return $this->getLcdv16();
                break;
            case 3:
                return $this->getLcdv32();
                break;
            case 4:
                return $this->getRegNumber();
                break;
            case 5:
                return $this->getFirstRegDate();
                break;
            case 6:
                return $this->getCarMake();
                break;
            case 7:
                return $this->getModelVariant();
                break;
            case 8:
                return $this->getModelFinishing();
                break;
            case 9:
                return $this->getGearBox();
                break;
            case 10:
                return $this->getOutline();
                break;
            case 11:
                return $this->getCarGenre();
                break;
            case 12:
                return $this->getDealerCode();
                break;
            case 13:
                return $this->getDealerName();
                break;
            case 14:
                return $this->getLastKnownMilage();
                break;
            case 15:
                return $this->getSysameUpdatedAt();
                break;
            case 16:
                return $this->getCreatedAt();
                break;
            case 17:
                return $this->getUpdatedAt();
                break;
            case 18:
                return $this->getDeletedAt();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Car'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Car'][$this->getPrimaryKey()] = true;
        $keys = CarPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getVinNumber(),
            $keys[2] => $this->getLcdv16(),
            $keys[3] => $this->getLcdv32(),
            $keys[4] => $this->getRegNumber(),
            $keys[5] => $this->getFirstRegDate(),
            $keys[6] => $this->getCarMake(),
            $keys[7] => $this->getModelVariant(),
            $keys[8] => $this->getModelFinishing(),
            $keys[9] => $this->getGearBox(),
            $keys[10] => $this->getOutline(),
            $keys[11] => $this->getCarGenre(),
            $keys[12] => $this->getDealerCode(),
            $keys[13] => $this->getDealerName(),
            $keys[14] => $this->getLastKnownMilage(),
            $keys[15] => $this->getSysameUpdatedAt(),
            $keys[16] => $this->getCreatedAt(),
            $keys[17] => $this->getUpdatedAt(),
            $keys[18] => $this->getDeletedAt(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->collUserCars) {
                $result['UserCars'] = $this->collUserCars->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = CarPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setVinNumber($value);
                break;
            case 2:
                $this->setLcdv16($value);
                break;
            case 3:
                $this->setLcdv32($value);
                break;
            case 4:
                $this->setRegNumber($value);
                break;
            case 5:
                $this->setFirstRegDate($value);
                break;
            case 6:
                $this->setCarMake($value);
                break;
            case 7:
                $this->setModelVariant($value);
                break;
            case 8:
                $this->setModelFinishing($value);
                break;
            case 9:
                $this->setGearBox($value);
                break;
            case 10:
                $this->setOutline($value);
                break;
            case 11:
                $this->setCarGenre($value);
                break;
            case 12:
                $this->setDealerCode($value);
                break;
            case 13:
                $this->setDealerName($value);
                break;
            case 14:
                $this->setLastKnownMilage($value);
                break;
            case 15:
                $this->setSysameUpdatedAt($value);
                break;
            case 16:
                $this->setCreatedAt($value);
                break;
            case 17:
                $this->setUpdatedAt($value);
                break;
            case 18:
                $this->setDeletedAt($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = CarPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setVinNumber($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setLcdv16($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setLcdv32($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setRegNumber($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setFirstRegDate($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setCarMake($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setModelVariant($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setModelFinishing($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setGearBox($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setOutline($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setCarGenre($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setDealerCode($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setDealerName($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setLastKnownMilage($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setSysameUpdatedAt($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setCreatedAt($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setUpdatedAt($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setDeletedAt($arr[$keys[18]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(CarPeer::DATABASE_NAME);

        if ($this->isColumnModified(CarPeer::ID)) $criteria->add(CarPeer::ID, $this->id);
        if ($this->isColumnModified(CarPeer::VIN_NUMBER)) $criteria->add(CarPeer::VIN_NUMBER, $this->vin_number);
        if ($this->isColumnModified(CarPeer::LCDV_16)) $criteria->add(CarPeer::LCDV_16, $this->lcdv_16);
        if ($this->isColumnModified(CarPeer::LCDV_32)) $criteria->add(CarPeer::LCDV_32, $this->lcdv_32);
        if ($this->isColumnModified(CarPeer::REG_NUMBER)) $criteria->add(CarPeer::REG_NUMBER, $this->reg_number);
        if ($this->isColumnModified(CarPeer::FIRST_REG_DATE)) $criteria->add(CarPeer::FIRST_REG_DATE, $this->first_reg_date);
        if ($this->isColumnModified(CarPeer::CAR_MAKE)) $criteria->add(CarPeer::CAR_MAKE, $this->car_make);
        if ($this->isColumnModified(CarPeer::MODEL_VARIANT)) $criteria->add(CarPeer::MODEL_VARIANT, $this->model_variant);
        if ($this->isColumnModified(CarPeer::MODEL_FINISHING)) $criteria->add(CarPeer::MODEL_FINISHING, $this->model_finishing);
        if ($this->isColumnModified(CarPeer::GEAR_BOX)) $criteria->add(CarPeer::GEAR_BOX, $this->gear_box);
        if ($this->isColumnModified(CarPeer::OUTLINE)) $criteria->add(CarPeer::OUTLINE, $this->outline);
        if ($this->isColumnModified(CarPeer::CAR_GENRE)) $criteria->add(CarPeer::CAR_GENRE, $this->car_genre);
        if ($this->isColumnModified(CarPeer::DEALER_CODE)) $criteria->add(CarPeer::DEALER_CODE, $this->dealer_code);
        if ($this->isColumnModified(CarPeer::DEALER_NAME)) $criteria->add(CarPeer::DEALER_NAME, $this->dealer_name);
        if ($this->isColumnModified(CarPeer::LAST_KNOWN_MILAGE)) $criteria->add(CarPeer::LAST_KNOWN_MILAGE, $this->last_known_milage);
        if ($this->isColumnModified(CarPeer::SYSAME_UPDATED_AT)) $criteria->add(CarPeer::SYSAME_UPDATED_AT, $this->sysame_updated_at);
        if ($this->isColumnModified(CarPeer::CREATED_AT)) $criteria->add(CarPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(CarPeer::UPDATED_AT)) $criteria->add(CarPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(CarPeer::DELETED_AT)) $criteria->add(CarPeer::DELETED_AT, $this->deleted_at);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(CarPeer::DATABASE_NAME);
        $criteria->add(CarPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Car (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setVinNumber($this->getVinNumber());
        $copyObj->setLcdv16($this->getLcdv16());
        $copyObj->setLcdv32($this->getLcdv32());
        $copyObj->setRegNumber($this->getRegNumber());
        $copyObj->setFirstRegDate($this->getFirstRegDate());
        $copyObj->setCarMake($this->getCarMake());
        $copyObj->setModelVariant($this->getModelVariant());
        $copyObj->setModelFinishing($this->getModelFinishing());
        $copyObj->setGearBox($this->getGearBox());
        $copyObj->setOutline($this->getOutline());
        $copyObj->setCarGenre($this->getCarGenre());
        $copyObj->setDealerCode($this->getDealerCode());
        $copyObj->setDealerName($this->getDealerName());
        $copyObj->setLastKnownMilage($this->getLastKnownMilage());
        $copyObj->setSysameUpdatedAt($this->getSysameUpdatedAt());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setDeletedAt($this->getDeletedAt());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getUserCars() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addUserCar($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Car Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return CarPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new CarPeer();
        }

        return self::$peer;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('UserCar' == $relationName) {
            $this->initUserCars();
        }
    }

    /**
     * Clears out the collUserCars collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Car The current object (for fluent API support)
     * @see        addUserCars()
     */
    public function clearUserCars()
    {
        $this->collUserCars = null; // important to set this to null since that means it is uninitialized
        $this->collUserCarsPartial = null;

        return $this;
    }

    /**
     * reset is the collUserCars collection loaded partially
     *
     * @return void
     */
    public function resetPartialUserCars($v = true)
    {
        $this->collUserCarsPartial = $v;
    }

    /**
     * Initializes the collUserCars collection.
     *
     * By default this just sets the collUserCars collection to an empty array (like clearcollUserCars());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initUserCars($overrideExisting = true)
    {
        if (null !== $this->collUserCars && !$overrideExisting) {
            return;
        }
        $this->collUserCars = new PropelObjectCollection();
        $this->collUserCars->setModel('UserCar');
    }

    /**
     * Gets an array of UserCar objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Car is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|UserCar[] List of UserCar objects
     * @throws PropelException
     */
    public function getUserCars($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collUserCarsPartial && !$this->isNew();
        if (null === $this->collUserCars || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collUserCars) {
                // return empty collection
                $this->initUserCars();
            } else {
                $collUserCars = UserCarQuery::create(null, $criteria)
                    ->filterByCar($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collUserCarsPartial && count($collUserCars)) {
                      $this->initUserCars(false);

                      foreach($collUserCars as $obj) {
                        if (false == $this->collUserCars->contains($obj)) {
                          $this->collUserCars->append($obj);
                        }
                      }

                      $this->collUserCarsPartial = true;
                    }

                    $collUserCars->getInternalIterator()->rewind();
                    return $collUserCars;
                }

                if($partial && $this->collUserCars) {
                    foreach($this->collUserCars as $obj) {
                        if($obj->isNew()) {
                            $collUserCars[] = $obj;
                        }
                    }
                }

                $this->collUserCars = $collUserCars;
                $this->collUserCarsPartial = false;
            }
        }

        return $this->collUserCars;
    }

    /**
     * Sets a collection of UserCar objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $userCars A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Car The current object (for fluent API support)
     */
    public function setUserCars(PropelCollection $userCars, PropelPDO $con = null)
    {
        $userCarsToDelete = $this->getUserCars(new Criteria(), $con)->diff($userCars);

        $this->userCarsScheduledForDeletion = unserialize(serialize($userCarsToDelete));

        foreach ($userCarsToDelete as $userCarRemoved) {
            $userCarRemoved->setCar(null);
        }

        $this->collUserCars = null;
        foreach ($userCars as $userCar) {
            $this->addUserCar($userCar);
        }

        $this->collUserCars = $userCars;
        $this->collUserCarsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related UserCar objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related UserCar objects.
     * @throws PropelException
     */
    public function countUserCars(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collUserCarsPartial && !$this->isNew();
        if (null === $this->collUserCars || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collUserCars) {
                return 0;
            }

            if($partial && !$criteria) {
                return count($this->getUserCars());
            }
            $query = UserCarQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCar($this)
                ->count($con);
        }

        return count($this->collUserCars);
    }

    /**
     * Method called to associate a UserCar object to this object
     * through the UserCar foreign key attribute.
     *
     * @param    UserCar $l UserCar
     * @return Car The current object (for fluent API support)
     */
    public function addUserCar(UserCar $l)
    {
        if ($this->collUserCars === null) {
            $this->initUserCars();
            $this->collUserCarsPartial = true;
        }
        if (!in_array($l, $this->collUserCars->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddUserCar($l);
        }

        return $this;
    }

    /**
     * @param	UserCar $userCar The userCar object to add.
     */
    protected function doAddUserCar($userCar)
    {
        $this->collUserCars[]= $userCar;
        $userCar->setCar($this);
    }

    /**
     * @param	UserCar $userCar The userCar object to remove.
     * @return Car The current object (for fluent API support)
     */
    public function removeUserCar($userCar)
    {
        if ($this->getUserCars()->contains($userCar)) {
            $this->collUserCars->remove($this->collUserCars->search($userCar));
            if (null === $this->userCarsScheduledForDeletion) {
                $this->userCarsScheduledForDeletion = clone $this->collUserCars;
                $this->userCarsScheduledForDeletion->clear();
            }
            $this->userCarsScheduledForDeletion[]= clone $userCar;
            $userCar->setCar(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Car is new, it will return
     * an empty collection; or if this Car has previously
     * been saved, it will retrieve related UserCars from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Car.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|UserCar[] List of UserCar objects
     */
    public function getUserCarsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = UserCarQuery::create(null, $criteria);
        $query->joinWith('User', $join_behavior);

        return $this->getUserCars($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->vin_number = null;
        $this->lcdv_16 = null;
        $this->lcdv_32 = null;
        $this->reg_number = null;
        $this->first_reg_date = null;
        $this->car_make = null;
        $this->model_variant = null;
        $this->model_finishing = null;
        $this->gear_box = null;
        $this->outline = null;
        $this->car_genre = null;
        $this->dealer_code = null;
        $this->dealer_name = null;
        $this->last_known_milage = null;
        $this->sysame_updated_at = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->deleted_at = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->alreadyInClearAllReferencesDeep = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep && !$this->alreadyInClearAllReferencesDeep) {
            $this->alreadyInClearAllReferencesDeep = true;
            if ($this->collUserCars) {
                foreach ($this->collUserCars as $o) {
                    $o->clearAllReferences($deep);
                }
            }

            $this->alreadyInClearAllReferencesDeep = false;
        } // if ($deep)

        if ($this->collUserCars instanceof PropelCollection) {
            $this->collUserCars->clearIterator();
        }
        $this->collUserCars = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(CarPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

}
